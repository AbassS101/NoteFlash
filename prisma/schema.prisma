// schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String        @unique
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  accounts      Account[]
  sessions      Session[]
  notes         Note[]
  flashcards    Flashcard[]
  quizzes       Quiz[]
  quizAttempts  QuizAttempt[] // Add this line
  settings      Settings?
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Settings {
  id             String  @id @default(cuid())
  userId         String  @unique
  darkMode       Boolean @default(false)
  autoSave       Boolean @default(true)
  fontSize       String  @default("medium")
  reviewLimit    Int     @default(50)
  autoGenerate   Boolean @default(false)
  shuffleQuiz    Boolean @default(true)
  showAnswers    Boolean @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Note {
  id        String   @id @default(cuid())
  title     String
  content   Json     // Store Tiptap JSON content
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String

  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  flashcards  Flashcard[]
}

model Flashcard {
  id           String   @id @default(cuid())
  front        String
  back         String
  deck         String   @default("Default")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  lastReviewed DateTime?
  nextReview   DateTime @default(now())
  interval     Int      @default(0)
  easeFactor   Float    @default(2.5)
  reviewCount  Int      @default(0)
  userId       String
  noteId       String?  // Optional, as flashcards can be created without notes

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  note Note? @relation(fields: [noteId], references: [id], onDelete: SetNull)
  quizQuestions QuizQuestion[]
}

model Quiz {
  id            String   @id @default(cuid())
  title         String
  description   String?
  timeLimit     Int      @default(15) // in minutes
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  lastTaken     DateTime?
  timesCompleted Int      @default(0)
  bestScore     Float    @default(0) // percentage
  userId        String
  tags          String[] @default([])

  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  questions QuizQuestion[]
  attempts  QuizAttempt[]
}

model QuizQuestion {
  id            String   @id @default(cuid())
  text          String
  options       String[] // Array of options
  correctAnswer String   // The correct answer
  quizId        String
  flashcardId   String?  // Optional, if generated from flashcard

  quiz      Quiz       @relation(fields: [quizId], references: [id], onDelete: Cascade)
  flashcard Flashcard? @relation(fields: [flashcardId], references: [id], onDelete: SetNull)
}

model QuizAttempt {
  id        String   @id @default(cuid())
  quizId    String
  userId    String
  score     Float    // percentage
  answers   Json     // Store answers as JSON
  startedAt DateTime @default(now())
  endedAt   DateTime?
  
  quiz Quiz @relation(fields: [quizId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}